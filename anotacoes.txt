HTML I

A linguagem HTML serve para marcar conteúdo, ou seja, especificar o que cada letra, palavra e frase significa. Usamos ela para criar páginas pois, assim, o navegador e outras ferramentas que trabalham na Internet conseguem analisar e processar nosso conteúdo, apresentando-o de forma adequada para os usuários.

Sobre font-family: Toda declaração font-family pode ter, além do nome da fonte que se deseja usar, uma alternativa que seja o tipo de fonte que se deseja usar. Assim, se o navegador não encontrar a fonte desejada, pode recorrer a uma fonte parecida.

Termos

metainformações = informações de código para o computador
conteúdo = informações de código para o usuário

Tags

<em> = itálico
<strong> = negrito
<blockquote> = próprio para blocos de texto em que há citações.
      <cite> auxiliar do blockquote, usado para indicar o autor da citação.


Para Css:

alt: legenda para deficientes.
title: legenda que aparece quando o mouse passa em cima.
padding : aumenta o espaço dentro do elemento

border: atribui bordas ao elemento. Deve-se definir o tamanho em PX, a cor (ex: #FFFFFF) e o tipo, que pode ser solid (linha contínua), dashed (tracejada grande), dotted (tracejada pequena).

margin: controla o espaço entre elementos.
width e height: largura e altura de um elemento só

box-sizing: controla como a altura e largura devem ser calculadas

line-heigth: controla o espaço entre as linhas de um texo.

display: usado para alinhar um elemento (inline) ou empilhá-los (block). Há tambem o inline-block que permite configurar o tamanho do inline

text-transform: uppercase/lowercase; = deixa o texto todo em maiúsculo/minúsculo.

text-ident = desloca o texto para a direita ou esquerda com o valor que vc quiser

font-weight: bold = deixa o texto em negrito.


float: permite que o elemento "flutue" para qualquer lado sem restrições de conceito
obs: todos os floats que colocamos em sequência formam uma linha

clear: dá a regra de quais elementos ficam limitados a não serem atingidos pelo float de outro elemento
   clear: both = não importa em qual lado os floats estejam, o elemento com essa regra sempre irá para baixo dele

position: uma forma mais livre e menos limitada de mover os objetos pelo espaço.
     relative: ? mantém no fluxo da página e se posiciona em relação a sua posição original
     absolute: ? posiciona o elemento sem as limitações do fluxo da página.
     fixed: o elemento fica fixo na tela para sempre
obs: os elementos com absolute irão se mover relativamente a posição do seu "pai", ou seja, se deseja deslocar uma div que está dentro de uma section, e essa section tiver uma posição definida, a div em questão irá se deslocar somente dentro do campo do seu "pai", ou seja, da section. Caso contrário, essa div irá se mover dentro do elemento mais próximo que tenha posição definida.

# = seletor de id's
. (ponto) = seletor de classes

Conflitos (class, id e tag)

duas classes juntas em um mesmo elemento com regras conflituosas: o último escrito no código será atendido.

uma classe e um id juntos em um mesmo elemento e com regras conflituosas: o id sempre será atendido conforme a regra da especificidade.

O mais específico sempre será o atendido, e uma tag entrando em conflito com uma classe ou id nunca será prioridade pois tags são genéricas e vagas.

=========================================

HTML II

px: medida absoluta, não recomendada caso queira usar em elementos que devem ser flexíveis a alterações;

em, %: medidas flexiveis.

em: o valor desta tag é relativo ao tamanho da fonte do elemento em questão

rem: equivale ao tamanho de fonte do elemento html ou, se não houver tamanho de fonte definido neste elemento, o tamanho de fonte padrão do navegador.

diferença entre rem e em: rem tem uma medida única para a página inteira, é menos flexível. Já a medida em varia de acordo com o elemento que é utilizado.

bordas aredondadas

border-radius: comando usado no css para deixar as bordas aredondadas. 
-> border-radius: 10px; (todas as bordas aredondadas, quanto mais o valor, mais aredondado o elemento será)
-> border-radius: 10px 0 10px 0; (pode tambem controlar quais pontas serão aredondadas)

Obs: essas propriedades podem não funcionar corretamente em todos os navegadores. Em alguns casos pode-se reverter esssa situação colocando um comando antes da declaração do border-radius. 
Chrome: -webkit-
Mozila: -moz-
Opera: -o- / -webkit-
Safari: -webkit-
Explorer: -ms-
Quando o navegador não reconhece nenhum dos
 dois, as linhas são ignoradas e o elemento é apresentado com as bordas quadradas.

Transform:
A propriedade transform permite que as mais diversas transformações sejam feitas em um determinado elemento, desde criar faixas até deixar um elemento em 3D.

div{
     transform: ...
}

rotate(30deg) = gira o elemento no número de graus que for colocado.

scale(1.5) = aumentar de tamanho

skew(20deg) = entorta o elemento no nú,erp de graus declarado.

translate = deslocar ela para qualquer lugar
-Demo-
div{
     transform: translate(10px, 50px);
}

E é possível usar todas essas propriedades juntas, separadas por um espaço.
Transform é uma propriedade nova, portanto pode precisar do -webkit- por exemplo.

Efeito 3D com transform

Usa-se a função translateY, translateX e translateZ para controlar a forma que ele vai se deslocar até surtir o efeito 3D na tela, sendo o translateZ o principal responsável por trazer o efeito de aproximar o elemento da cara do usuário.
-Demo-

.bola1{
        transform: translateZ(2px)
} /* estará se aproximando do usuário*/

.bola2{
        transform: translateZ(2px)
}/* estará se afastando do usuário*/

A propriedade perspective é importante para controlar a perspectiva que o usuário terá na tela. Ela deve ser aplicada sempre na class pai do elemento em questão.
-DEMO-

.bolas{
         perspective: 4px;
}

transform-style: preserve-3d - para os elementos de dentro de um container numa cena 3D também entrarem no cálculo da perspectiva. (para caso de fazer um superelemento em 3D e ele não funcionar. Coloque no pai)
overflow: scroll (interessante para adicionar uma barra de rolagem, de forma que o conteúdo do elemento venha sendo mostrado conforme ela desce)

-- Rotacionando e Deslocando um elemento--

Começando por usar a propriedade:
transform-origin: 0 0;

para fazer com que o objeto rotacione pelo seu canto superior esquerdo, e não pleo centro, que é o padrão do navegador.

Após configuradas os valores de altura e largura, use a seguinte fórmula para saber quais valores de translação usar na horizontal e vertical, de forma que se posicione no grau exato que vc deseja.

horizontal: cos(45) * (altura - largura) + largura


vertical: -1 * sen(45) * altura

Os resultados das duas fórmulas você coloca respectivamente na propriedade translate(0, 0). E pronto.

Por via de dúvidas, sempre defina o width e o height. Para achar o height some as bordas top e bottom, os paddings top e bottom e o line-height.

{Border 0.25em = Top e Bottom = 0.5em

Padding 1 em = Top e bottom = 2em

line-height = 1em

Total 3.5em}

Efeito paralaxe: se trata do efeito de elementos que estão mais próximos parecem subir mais rapidamente que os que estão mais longe quando a tela e rolada.

--------------------------------------------------
Sombras

text-shadow: deslocamento tamanho cor
box-shadow: deslocamento tamanho cor
box shadow: 0 0 1em #000, inset 0 0 .5em #FFF

inset: sombra dentro do elemento
Opacity: de 0 a 1 pode deixar seu elemento levemente ou totalmente transparente. 
Pode ser usado no rgba tambem, da seguinte forma: rgba(0,0,0, 0.8) por exemplo.
-------------------------------------------
Gradientes

background-image: linear-gradient(to bottom, #F00 80%, #000);

Permite colocar um efeito de gradiente no elemento. Controlando em que sentido ele vai ser (para baixo, para cima, para a esquerda etc), e pode ser colocada diversas cores sequencias e tambem o tamanho de cada uma, tudo isso separado por vírgulas.

background-size: 100% 200px
Permitir definir o espaço que o gradiente ocupará no elemento.

background-repeat: no-repeat;
Permite fazer com que o comportamento de repetir o background quando há espaço que não foi preenchido, não aconteça.

background-attachment: fixed
Permite que o background-image permaneça fixo enquanto os elementos passeiam por ele.

background-position: 50% 50%
Permite definir qual será a posição do background no elemento, pode ser usado tambem valores como center, bottom e etc.

background-image: radial-gradient(yellow, red)
Gera um efeito de o gradiente estar se dissipando para todos os lados

background-image: radial-gradient(circle at bottom left, yellow, red)
Permite definir que o radial seja na forma de círculo e que vá para uma direção especificada.

--------------------------------------------------

Formas de selecionar elementos no css

Tags
Classe
ID
Pai e filho

~ : depois de; selecionar um elemento depois de um elemento.
+ : logo depois; pega o elemento que está imediatamente depois do elemento em questão.
> : seleciona o elemento seguinte em forma de hierarquia. Ou seja, funciona de pai para filho, nunca entre irmãos, ou seja, tags juntas no mesmo container.

irmão ~ irmão
irmão + irmão seguinte
pai > filho

Esses seletores podem ser combinadas, por exemplo: .noticia > h1 + p

seletor [] : podemos usá-la para selecionar elementos com um determinado valor com o $. 
ex: [src$=".jpg"]
Colocamos a classe do elemento que desejamos selecionar, colocamos a indicação de selecionaremos por valor ($) e em seguida colocamos entre aspas o valor em si, que no caso é ".jpg".

Pode ser selecionado tambem através de uma denominação especifica com o ^
ex: [href^="http://"]
Seguindo a mesma lógica do outro, mas dessa vez só com os elementos que começam com http://

Ou simplesmente se queremos selecionar uma determinada classe basta usar o seletor com a classe dentro.
ex: [div].
--------------------------------------------------
Pseudoclasses

: - representado por dois pontos

Aplicado em tabelas, onde deseja-se fazer uma tabela listrada, onde um tr é de uma e os seguintes são de outra, usa-se:
:nth-child()

Nos parêntes você define se quer que seja aplicada as cores em par (even), ou ímpar (odd), ou até mesmo com fórmulas. por exemplo:
:nth-child(2n) : de dois em dois (par)
:nth-child(2n+1) : para pegar os ímpares
:nth-child(3n+1) : pulando de 3 em 3
:nth-child(3n+2) : pulando de 3 em 3 apartir do 2º filho

antes dos dois pontos especifica-se qual a classe da qual deseja aplicar o efeito. Por exemplo, desejo aplicar somente nas classes de uma tabela, ou seja, tr. Logo a expressão fica:

tr:nth-child(2n)

Caso contrário o efeito será aplicado em todos os elementos que obedecem à expressão.
Outras pseudoclasses estruturais
:first-child
:last-child
:nth-child - seleciona os dos mesmo tipo inclusive todos os filhos
:nth-of-type - seleciona somente do mesmo tipo

Há muitas pseuclasses com diferentes funcionalidades. Por eemplo, há a pseuclasse :hover, que é usada para mudar a cor de um elemento quando a seta do mouse se aproxima.

Ex: botão

<a href="..." class= "botão hover">

.botao {
   border: 8px solid purple;
}
.botao:hover{
   background-color: purple;
}

--------------------------------------------------

Tabindex : usado para auxiliar os modais que criamos através do box-shadow com o hover (quando o teclado passa em cima). Como nem todos usam o mouse como navegação, mas tambem o celular e o teclado, o tabindex serve para fazer funcionar o efeito mesmo que sem o hover, utilizando o focus.
Exemplificando:

tabindex="1"
.css a:focus{
}
Quando a seta do mouse se aproximar do botão a cor dele irá mudar para roxo. Isso dá um efeito bacana sem precisar de javascript.
Outras pseuclasses dinâmicas
:hover
:focus
:active
:checked
--------------------------------------------------

Pseudoelementos

p:first-letter : faz com que a primeira letra de um parágrafo seja maior.

class:before / class:after
Tem como função abrir espaço em pseudoelemento para colocar algo antes ou depois do texto em questão. Com o content é possível informar qual caractere ou imagem será colocado.

blockquote:before{
       content: '"';
}

Há diversas possibilidades, apartir disso é possível fazer tudo, garantindo um html ainda mais limpo.

data- : podemos criar qualquer atributo sem que ele fique invalido só utilizando o data-escolhaonome=" " na frente. No caso do curso utilizamos para personalizar as legendas e evitar que entrasse em conflito com o title.
e no css coloque: content: attr(escolhaonome).
 --------------------------------------------------

Formulários

Pattern: podemos especificar qual padrão deve seguir um determinado campo, para que o usuário preencha-o corretamente. Especificamos esse padrão usando uma linguagem chamada expressão regular. Para garantir que um campo só tenha letras e números, por exemplo, podemos fazer:

<input pattern="[A-Za-z0-9]{8,}">

Entre colchetes é informado qual o mínimo de caracteres que aquele campo deve ter.

--------------------------------------------------

Propriedade calc

É possível usá-la para cálcular tamanho, quanto um elemento deve ter de tamanho em relação ao outro, e etc.
Ex: width: calc(100% - 2em);

--------------------------------------------------
Tabelas

Estrutura padrão:

<table>
  <thead>
     <tr>
        <td> Título 1 </td>
        <td> Título 2 </td>
     </tr>
  </thead>

  <tbody>
    <tr>
        <td> Conteúdo 1 </td>
        <td> Conteúdo 2 </td>
    </tr>
  </tbody>

  <tfooter>
    <tr> Índice 1 </tr>
    <tr> Índice 2 </tr>
  </tfooter>
</table>

Tag th: é uma alternativa para o td. Ambos são usados para marcar células.
border-collapse: separate; - para separar as células, deixar de mantê-las grudadas.
border-spacing: 0px; - adiciona espaço entre as células; 
