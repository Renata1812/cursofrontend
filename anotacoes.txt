HTML I

A linguagem HTML serve para marcar conteúdo, ou seja, especificar o que cada letra, palavra e frase significa. Usamos ela para criar páginas pois, assim, o navegador e outras ferramentas que trabalham na Internet conseguem analisar e processar nosso conteúdo, apresentando-o de forma adequada para os usuários.

Sobre font-family: Toda declaração font-family pode ter, além do nome da fonte que se deseja usar, uma alternativa que seja o tipo de fonte que se deseja usar. Assim, se o navegador não encontrar a fonte desejada, pode recorrer a uma fonte parecida.

Termos

metainformações = informações de código para o computador
conteúdo = informações de código para o usuário

Tags

<em> = itálico
<strong> = negrito
<blockquote> = próprio para blocos de texto em que há citações.
      <cite> auxiliar do blockquote, usado para indicar o autor da citação.


Para Css:

padding : aumenta o espaço dentro do elemento

border: atribui bordas ao elemento. Deve-se definir o tamanho em PX, a cor (ex: #FFFFFF) e o tipo, que pode ser solid (linha contínua), dashed (tracejada grande), dotted (tracejada pequena).

margin: controla o espaço entre elementos.
width e height: largura e altura de um elemento só

box-sizing: controla como a altura e largura devem ser calculadas

line-heigth: controla o espaço entre as linhas de um texo.

display: usado para alinhar um elemento (inline) ou empilhá-los (block). Há tambem o inline-block que permite configurar o tamanho do inline

text-transform: uppercase/lowercase; = deixa o texto todo em maiúsculo/minúsculo.

text-ident = desloca o texto para a direita ou esquerda com o valor que vc quiser

float: permite que o elemento "flutue" para qualquer lado sem restrições de conceito
obs: todos os floats que colocamos em sequência formam uma linha

clear: dá a regra de quais elementos ficam limitados a não serem atingidos pelo float de outro elemento
   clear: both = não importa em qual lado os floats estejam, o elemento com essa regra sempre irá para baixo dele

position: uma forma mais livre e menos limitada de mover os objetos pelo espaço.
     relative: ? mantém no fluxo da página e se posiciona em relação a sua posição original
     absolute: ? posiciona o elemento sem as limitações do fluxo da página.
     fixed: o elemento fica fixo na tela para sempre
obs: os elementos com absolute irão se mover relativamente a posição do seu "pai", ou seja, se deseja deslocar uma div que está dentro de uma section, e essa section tiver uma posição definida, a div em questão irá se deslocar somente dentro do campo do seu "pai", ou seja, da section. Caso contrário, essa div irá se mover dentro do elemento mais próximo que tenha posição definida.

# = seletor de id's
. (ponto) = seletor de classes

Conflitos (class, id e tag)

duas classes juntas em um mesmo elemento com regras conflituosas: o último escrito no código será atendido.

uma classe e um id juntos em um mesmo elemento e com regras conflituosas: o id sempre será atendido conforme a regra da especificidade.

O mais específico sempre será o atendido, e uma tag entrando em conflito com uma classe ou id nunca será prioridade pois tags são genéricas e vagas.

=========================================

HTML II

px: medida absoluta, não recomendada caso queira usar em elementos que devem ser flexíveis a alterações;

em, %: medidas flexiveis.

em: o valor desta tag é relativo ao tamanho da fonte do elemento em questão

rem: equivale ao tamanho de fonte do elemento html ou, se não houver tamanho de fonte definido neste elemento, o tamanho de fonte padrão do navegador.

diferença entre rem e em: rem tem uma medida única para a página inteira, é menos flexível. Já a medida em varia de acordo com o elemento que é utilizado.

bordas aredondadas

border-radius: comando usado no css para deixar as bordas aredondadas. 
-> border-radius: 10px; (todas as bordas aredondadas, quanto mais o valor, mais aredondado o elemento será)
-> border-radius: 10px 0 10px 0; (pode tambem controlar quais pontas serão aredondadas)

Obs: essas propriedades podem não funcionar corretamente em todos os navegadores. Em alguns casos pode-se reverter esssa situação colocando um comando antes da declaração do border-radius. 
Chrome: -webkit-
Mozila: -moz-
Opera: -o- / -webkit-
Safari: -webkit-
Explorer: -ms-
Quando o navegador não reconhece nenhum dos
 dois, as linhas são ignoradas e o elemento é apresentado com as bordas quadradas.

Transform:
A propriedade transform permite que as mais diversas transformações sejam feitas em um determinado elemento, desde criar faixas até deixar um elemento em 3D.

div{
     transform: ...
}

rotate(30deg) = gira o elemento no número de graus que for colocado.

scale(1.5) = aumentar de tamanho

skew(20deg) = entorta o elemento no nú,erp de graus declarado.

translate = deslocar ela para qualquer lugar
-Demo-
div{
     transform: translate(10px, 50px);
}

E é possível usar todas essas propriedades juntas, separadas por um espaço.
Transform é uma propriedade nova, portanto pode precisar do -webkit- por exemplo.

Efeito 3D com transform

Usa-se a função translateY, translateX e translateZ para controlar a forma que ele vai se deslocar até surtir o efeito 3D na tela, sendo o translateZ o principal responsável por trazer o efeito de aproximar o elemento da cara do usuário.
-Demo-

.bola1{
        transform: translateZ(2px)
} /* estará se aproximando do usuário*/

.bola2{
        transform: translateZ(2px)
}/* estará se afastando do usuário*/

A propriedade perspective é importante para controlar a perspectiva que o usuário terá na tela. Ela deve ser aplicada sempre na class pai do elemento em questão.
-DEMO-

.bolas{
         perspective: 4px;
}

transform-style: preserve-3d - para os elementos de dentro de um container numa cena 3D também entrarem no cálculo da perspectiva. (para caso de fazer um superelemento em 3D e ele não funcionar. Coloque no pai)
overflow: scroll (interessante para adicionar uma barra de rolagem, de forma que o conteúdo do elemento venha sendo mostrado conforme ela desce)

-- Rotacionando e Deslocando um elemento--

Começando por usar a propriedade:
transform-origin: 0 0;

para fazer com que o objeto rotacione pelo seu canto superior esquerdo, e não pleo centro, que é o padrão do navegador.

Após configuradas os valores de altura e largura, use a seguinte fórmula para saber quais valores de translação usar na horizontal e vertical, de forma que se posicione no grau exato que vc deseja.

horizontal: cos(45) * (altura - largura) + largura


vertical: -1 * sen(45) * altura

Os resultados das duas fórmulas você coloca respectivamente na propriedade translate(0, 0). E pronto.

Por via de dúvidas, sempre defina o width e o height. Para achar o height some as bordas top e bottom, os paddings top e bottom e o line-height.

{Border 0.25em = Top e Bottom = 0.5em

Padding 1 em = Top e bottom = 2em

line-height = 1em

Total 3.5em}

Obs: procurar saber como funciona o paralaxe.

--------------------------------------------------
Sombras

text-shadow: deslocamento tamanho cor
box-shadow: deslocamento tamanho cor
box shadow: 0 0 1em #000, inset 0 0 .5em #FFF

inset: sombra dentro do elemento
Opacity: de 0 a 1 pode deixar seu elemento levemente ou totalmente transparente. 
Pode ser usado no rgba tambem, da seguinte forma: rgba(0,0,0, 0.8) por exemplo.